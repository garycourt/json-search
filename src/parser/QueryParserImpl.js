QueryParser.impl = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "BooleanClause": parse_BooleanClause,
        "BooleanQuery": parse_BooleanQuery,
        "Boost": parse_Boost,
        "ESCAPED_CHAR": parse_ESCAPED_CHAR,
        "Number": parse_Number,
        "Phrase": parse_Phrase,
        "Query": parse_Query,
        "Range": parse_Range,
        "SKIP": parse_SKIP,
        "SubQuery": parse_SubQuery,
        "TERM_CHAR": parse_TERM_CHAR,
        "TERM_START_CHAR": parse_TERM_START_CHAR,
        "Term": parse_Term,
        "TermQuery": parse_TermQuery,
        "TermType": parse_TermType,
        "WHITESPACE": parse_WHITESPACE
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "Query";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_WHITESPACE() {
        var cacheKey = 'WHITESPACE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[ 	\n\r\u3000]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\n\\r\\u3000]");
          }
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SKIP() {
        var cacheKey = 'SKIP@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_WHITESPACE();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_WHITESPACE();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Number() {
        var cacheKey = 'Number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result8 = input.charAt(pos);
          pos++;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result8 !== null) {
          var result2 = [];
          while (result8 !== null) {
            result2.push(result8);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result2 = null;
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result5 = ".";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result5 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result7 !== null) {
              var result6 = [];
              while (result7 !== null) {
                result6.push(result7);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result7 = input.charAt(pos);
                  pos++;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result6 = null;
            }
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(num, fract) {
            return parseFloat(num.concat(fract[0], fract[1]).join(""));
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("number");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ESCAPED_CHAR() {
        var cacheKey = 'ESCAPED_CHAR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result1 = "\\";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result1 !== null) {
          if (input.length > pos) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed('any character');
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TERM_START_CHAR() {
        var cacheKey = 'TERM_START_CHAR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[^ 	\n\r\u3000+\-!():^[\]"{}~*?\\]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[^ 	\\n\\r\\u3000+\\-!():^[\\]\"{}~*?\\\\]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TERM_CHAR() {
        var cacheKey = 'TERM_CHAR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_TERM_START_CHAR();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_ESCAPED_CHAR();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 1) === "-") {
              var result2 = "-";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 1) === "+") {
                var result1 = "+";
                pos += 1;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"+\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Term() {
        var cacheKey = 'Term@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_TERM_START_CHAR();
        if (result2 !== null) {
          var result3 = [];
          var result4 = parse_TERM_CHAR();
          while (result4 !== null) {
            result3.push(result4);
            var result4 = parse_TERM_CHAR();
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(start, rest) {
            return [ start ].concat(rest).join("");
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("term");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Boost() {
        var cacheKey = 'Boost@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "^") {
          var result3 = "^";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"^\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_Number();
          if (result4 !== null) {
            var result2 = [result3, result4];
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        var result1 = result2 !== null ? result2 : '';
        var result0 = result1 !== null
          ? (function(boost) {
            if (boost) {
              boost = boost[1];
            }
            return (typeof boost === "number" ? boost : 1.0);
          })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("boost");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TermType() {
        var cacheKey = 'TermType@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_Term();
        if (result2 !== null) {
          if (input.substr(pos, 1) === "*") {
            var result4 = "*";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"*\"");
            }
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(term, wildcard) {
            if (wildcard) {
              return {prefix : term};
            } else {
              return {term : term};
            }
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Range() {
        var cacheKey = 'Range@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result17 = "[";
          pos += 1;
        } else {
          var result17 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result17 !== null) {
          var result2 = result17;
        } else {
          if (input.substr(pos, 1) === "{") {
            var result16 = "{";
            pos += 1;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result16 !== null) {
            var result2 = result16;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = parse_SKIP();
          if (result3 !== null) {
            var result4 = parse_Term();
            if (result4 !== null) {
              var result5 = parse_SKIP();
              if (result5 !== null) {
                if (input.substr(pos, 2) === "TO") {
                  var result15 = "TO";
                  pos += 2;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"TO\"");
                  }
                }
                if (result15 !== null) {
                  var result13 = result15;
                } else {
                  if (input.substr(pos, 1) === "-") {
                    var result14 = "-";
                    pos += 1;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"-\"");
                    }
                  }
                  if (result14 !== null) {
                    var result13 = result14;
                  } else {
                    var result13 = null;;
                  };
                }
                var result6 = result13 !== null ? result13 : '';
                if (result6 !== null) {
                  var result7 = parse_SKIP();
                  if (result7 !== null) {
                    var result8 = parse_Term();
                    if (result8 !== null) {
                      var result9 = parse_SKIP();
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === "]") {
                          var result12 = "]";
                          pos += 1;
                        } else {
                          var result12 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result12 !== null) {
                          var result10 = result12;
                        } else {
                          if (input.substr(pos, 1) === "}") {
                            var result11 = "}";
                            pos += 1;
                          } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"}\"");
                            }
                          }
                          if (result11 !== null) {
                            var result10 = result11;
                          } else {
                            var result10 = null;;
                          };
                        }
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(startRange, startTerm, endTerm, endRange) {
            var excludeStart = (startRange === "{");
            var excludeEnd = (endRange === "}");
            return {startTerm:startTerm, endTerm:endTerm, excludeStart:excludeStart, excludeEnd:excludeEnd};
          })(result1[0], result1[2], result1[6], result1[8])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Phrase() {
        var cacheKey = 'Phrase@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          while (result9 !== null) {
            result3.push(result9);
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result4 !== null) {
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "~") {
                var result7 = "~";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"~\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse_Number();
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(phrase, slop) {
            return {phrase:(phrase && phrase.length ? phrase.join("") : []), slop:(slop ? slop[1] : 0)};
          })(result1[1], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TermQuery() {
        var cacheKey = 'TermQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result9 = parse_Term();
        if (result9 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result10 = ":";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result10 !== null) {
            var result8 = [result9, result10];
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        var result2 = result8 !== null ? result8 : '';
        if (result2 !== null) {
          var result7 = parse_Phrase();
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result6 = parse_Range();
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_TermType();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                var result3 = null;;
              };
            };
          }
          if (result3 !== null) {
            var result4 = parse_Boost();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(field, term, boost) {
            field = field ? field[0] : defaultField;
            
            if (term.phrase) {
              return PhraseQuery.createFromTokens(field, analyzer.tokenize(term.phrase, field), term.slop, boost);
            } else if (term.startTerm) {
              return new TermRangeQuery(field, term.startTerm, term.endTerm, term.excludeStart, term.excludeEnd, boost);
            } else if (term.prefix) {
              return new PrefixQuery(field, term.prefix, boost);
            } else {
              var tokens = analyzer.tokenize(term.term, field);
              if (tokens.length === 1) {
                return new TermQuery(field, tokens[0].value, boost);
              } else if (tokens.length > 1) {
                var terms = [];
                for (var x = 0, xl = tokens.length; x < xl; ++x) {
                  terms[x] = tokens[x].value;
                }
                return new MultiTermQuery(field, terms, false, boost);
              }
            }
          })(result1[0], result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BooleanClause() {
        var cacheKey = 'BooleanClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result8 = "+";
          pos += 1;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result8 !== null) {
          var result6 = result8;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result7 = "-";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result7 !== null) {
            var result6 = result7;
          } else {
            var result6 = null;;
          };
        }
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          var result5 = parse_SubQuery();
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result4 = parse_TermQuery();
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(occur, query) {
            if (occur === "+") {
              occur = Occur.MUST;
            } else if (occur === "-") {
              occur = Occur.MUST_NOT;
            } else {
              occur = Occur.SHOULD;
            }
            
            return query && new BooleanClause(query, occur);
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BooleanQuery() {
        var cacheKey = 'BooleanQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_BooleanClause();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result7 = parse_WHITESPACE();
          if (result7 !== null) {
            var result5 = [];
            while (result7 !== null) {
              result5.push(result7);
              var result7 = parse_WHITESPACE();
            }
          } else {
            var result5 = null;
          }
          if (result5 !== null) {
            var result6 = parse_BooleanClause();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result7 = parse_WHITESPACE();
            if (result7 !== null) {
              var result5 = [];
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WHITESPACE();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result6 = parse_BooleanClause();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(clause, otherClauses) {
            var result = (clause ? [ clause ] : []);
            if (otherClauses) {
              for (var x = 0, xl = otherClauses.length; x < xl; ++x) {
                if (otherClauses[x][1]) {
                  result[result.length] = otherClauses[x][1];
                }
              }
            }
            return new BooleanQuery(result);
          })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SubQuery() {
        var cacheKey = 'SubQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result2 = "(";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_Query();
          if (result3 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result4 = ")";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_Boost();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(sub, boost) {
            sub.boost = boost;
            return sub;
          })(result1[1], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Query() {
        var cacheKey = 'Query@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_SKIP();
        if (result2 !== null) {
          var result3 = parse_BooleanQuery();
          if (result3 !== null) {
            var result4 = parse_SKIP();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(query) {
            return query;
          })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
/*
      
  function BooleanClause(query, occur) {
      
    this.query = query;
      
    this.occur = occur || Occur.SHOULD;
      
  };
      

      
  function BooleanQuery(clauses, minimumOptionalMatches, boost) {
      
    this.clauses = clauses || [];
      
    this.minimumOptionalMatches = minimumOptionalMatches || 0;
      
    this.boost = boost || 1.0;
      
  };
      
  
      
  var Occur = {
      
    MUST : 1,
      
    SHOULD : 0,
      
    MUST_NOT : -1
      
  };
      

      
  function PhraseQuery(field, terms, slop, boost) {
      
    this.field = field || null;
      
    this.terms = terms || [];
      
    this.slop = slop || 0;
      
    this.boost = boost || 1.0;
      
  };
      

      
  function PrefixQuery(field, prefix, boost) {
      
    this.field = field || null;
      
    this.prefix = prefix;
      
    this.boost = boost || 1.0;
      
  };
      

      
  function TermQuery(field, term, boost) {
      
    this.field = field || null;
      
    this.term = term;
      
    this.boost = boost || 1.0;
      
  };
      
  
      
  function TermRangeQuery(field, startTerm, endTerm, excludeStart, excludeEnd, boost) {
      
    this.field = field || null;
      
    this.startTerm = startTerm;
      
    this.endTerm = endTerm;
      
    this.excludeStart = excludeStart || false;
      
    this.excludeEnd = excludeEnd || false;
      
    this.boost = boost || 1.0;
      
  };
      
*/
      

      
  var defaultField = arguments[2] || null;
      
  var analyzer = arguments[3];  //must be available
      

      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return typeof this._source === 'string' ? this._source : this.toString(); }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})()